<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <context:component-scan base-package="com.lai.*"/>
    <context:annotation-config></context:annotation-config>
    <bean
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:database.properties</value>
        </property>
    </bean>
    <bean id="dataSource"
          class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 指定连接数据库连接池的最大连接 -->
        <property name="maxPoolSize" value="50" />
        <!-- 指定连接数据库连接池的最小连接 -->
        <property name="minPoolSize" value="10" />
        <!-- 指定连接数据库连接池的初始化连接数 -->
        <property name="initialPoolSize" value="10" />
        <property name="acquireIncrement" value="5" />
        <property name="numHelperThreads" value="10" />
        <property name="maxStatementsPerConnection" value="10" />
        <property name="idleConnectionTestPeriod" value="10000" />
        <property name="testConnectionOnCheckin" value="true" />
        <!-- 指定连接数据库连接池的最大空闲时间 -->
        <property name="maxIdleTime" value="28000" />
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- Hibernate session factory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">

        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>

        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.lai.entities</value>
            </list>
        </property>
    </bean>


    <!-- SessionFactory -->

    <!-- 定义事务管理器（声明式的事务）    -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>


    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--常见几张几种事务传播行为类型
        PROPAGATION_REQUIRED 如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。
        PROPAGATION_SUPPORTS 支持当前事务，如果当前没有事务，就以非事务方式执行。
        PROPAGATION_MANDATORY 使用当前的事务，如果当前没有事务，就抛出异常。
        PROPAGATION_REQUIRES_NEW 新建事务，如果当前存在事务，把当前事务挂起。
        PROPAGATION_NOT_SUPPORTED 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
        PROPAGATION_NEVER 以非事务方式执行，如果当前存在事务，则抛出异常。
        PROPAGATION_NESTED 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与 PROPAGATION_REQUIRED 类似的操作。
    -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="productServiceMethods"
                      expression="execution(* com.lai.services.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="productServiceMethods"/>
    </aop:config>
    <!--
        <bean id="transactionProxy" abstract="true"
              class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
            <property name="transactionManager" ref="transactionManager"/>
            <property name="transactionAttributes">
                <props>
                    <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
                    <prop key="save*">PROPAGATION_REQUIRED</prop>
                    <prop key="update*">PROPAGATION_REQUIRED</prop>
                    <prop key="delete*">PROPAGATION_REQUIRED</prop>
                </props>
            </property>
        </bean>
        <tx:advice id="txAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                <tx:method name="get" read-only="true"/>
                <tx:method name="*"/>
            </tx:attributes>
        </tx:advice>

        -->

    <!--<bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />-->
    <!-- <security:http pattern="/login.jsp" security="none"/>
     &lt;!&ndash; 不要过滤图片等静态资源，其中**代表可以跨越目录，*不可以跨越目录。 &ndash;&gt;
     <security:http pattern="/**/*.jpg" security="none"/>
     <security:http pattern="/**/*.png" security="none"/>
     <security:http pattern="/**/*.gif" security="none"/>
     <security:http pattern="/**/*.css" security="none"/>
     <security:http pattern="/**/*.js" security="none"/>
     <security:http auto-config="true" access-denied-page="/accessDenied.jsp" authentication-manager-ref="myAuthenticationManager"  use-expressions="true">

         <security:intercept-url pattern="/user.do**" access="hasRole('ROLE_ADMIN')"/>
         <security:intercept-url pattern="/src" access="hasRole('ROLE_USER')"/>
         <security:form-login login-page="/login.jsp"/>
         <security:logout logout-success-url="/login.jsp"/>
     </security:http>-->


    <!-- <security:authentication-manager>
         <security:authentication-provider ref='myAuthenticationProvider'/>
     </security:authentication-manager>-->

</beans>